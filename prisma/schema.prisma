generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model AuthUser {
  id           String        @id @default(cuid())
  type         UserType
  person       Person?
  company      Company?
  institute    Institute?
  auth_session AuthSession[]
  auth_key     AuthKey[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// TODO -> añadir Location a este modelo
model Person {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  ci            String       @unique
  birth         DateTime
  image         String?
  phone         String       @unique
  description   String
  authUser      AuthUser     @relation(fields: [authUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authUserId    String       @unique
  messages      Message[]
  memberships   Membership[]
  projects      Project[]
  // Profile fields
  employable    Boolean
  qualification String? // Esto podría ser una table de Títulos, pero por ahora un string
  curriculum    String?
  schedule      Json?
  fields        Field[]
  skills        Skill[]
  experiences   Experience[]
  candidacies   Candidacy[]
  internships   Internship[]
  reviews       Review[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
}

model Company {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  rif           String    @unique
  image         String?
  description   String    @db.Text
  phone         String    @unique
  certification String
  verifiedAt    DateTime?
  authUser      AuthUser  @relation(fields: [authUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authUserId    String    @unique
  location      Location  @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locationId    String
  projects      Project[]
  offers        Offer[]
  reviews       Review[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
}

model Institute {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  rif           String       @unique
  image         String?
  description   String       @db.Text
  phone         String       @unique
  certification String
  verifiedAt    DateTime?
  location      Location     @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locationId    String
  authUser      AuthUser     @relation(fields: [authUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authUserId    String       @unique
  internships   Internship[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
}

model Membership {
  id             String          @id @default(cuid())
  person         Person          @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  personId       String
  project        Project         @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId      String
  files          File[]
  participations Participation[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?
}

model Project {
  id          String       @id @default(cuid())
  title       String       @unique
  description String
  image       String?      @unique
  visibility  Visibility
  company     Company?     @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId   String?
  person      Person?      @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  personId    String?
  memberships Membership[]
  fields      Field[]
  tasks       Task[]
  release     Release?
  messages    Message[]
  files       File[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
}

model Participation {
  id           String     @id @default(cuid())
  isLeader     Boolean    @default(false)
  membership   Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  membershipId String
  task         Task       @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  taskId       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
}

model Task {
  id             String          @id @default(cuid())
  title          String
  description    String
  revisions      Revision[]
  status         TaskStatus?
  project        Project         @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId      String
  subtasks       Subtask[]
  participations Participation[]
  messages       Message[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?
}

model Subtask {
  id          String     @id @default(cuid())
  title       String
  description String
  revisions   Revision[]
  status      TaskStatus @default(PENDING)
  task        Task       @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  taskId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
}

model Revision {
  id          String    @id @default(cuid())
  description String
  task        Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  taskId      String?
  subtask     Subtask?  @relation(fields: [subtaskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subtaskId   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Release {
  id        String    @id @default(cuid())
  preview   String?   @unique
  price     Float
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Message {
  id        String    @id @default(cuid())
  content   String    @db.Text
  // TODO -> relaciones redundantes, pueden sustituirse por membership 
  person    Person    @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  personId  String
  project   Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String?
  //
  task      Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  taskId    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model File {
  id        String     @id @default(cuid())
  src       String
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String
  author    Membership @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
}

model Experience {
  id          String    @id @default(cuid())
  name        String
  role        String
  description String?   @db.Text
  from        DateTime
  to          DateTime
  person      Person    @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  personId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Review {
  id        String    @id @default(cuid())
  content   String    @db.Text
  person    Person    @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  personId  String
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Candidacy {
  id           String        @id @default(cuid())
  description  String?       @db.Text
  isActive     Boolean       @default(true)
  person       Person        @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  personId     String
  postulations Postulation[]
  recruitments Recruitment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
}

model Internship {
  id           String        @id @default(cuid())
  description  String?       @db.Text
  isActive     Boolean       @default(true)
  person       Person        @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  personId     String
  institute    Institute     @relation(fields: [instituteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  instituteId  String
  postulations Postulation[]
  recruitments Recruitment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
}

model Offer {
  id           String        @id @default(cuid())
  title        String
  description  String        @db.Text
  mode         Mode
  hours        Int?
  schedule     Schedule
  salary       Float
  target       Target
  limit        Int
  company      Company       @relation(fields: [companyId], references: [id])
  companyId    String
  location     Location      @relation(fields: [locationId], references: [id])
  locationId   String
  fields       Field[]
  skills       Skill[]
  postulations Postulation[]
  expiresAt    DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
}

model Postulation {
  id          String             @id @default(cuid())
  status      RecruitmentStatus? @default(PENDING)
  offer       Offer              @relation(fields: [offerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  offerId     String
  candidacy   Candidacy?         @relation(fields: [candidacyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  candidacyId String?
  intern      Internship?        @relation(fields: [internId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  internId    String?
  interviews  Interview[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  deletedAt   DateTime?
}

model Recruitment {
  id           String             @id @default(cuid())
  status       RecruitmentStatus? @default(PENDING)
  candidacy    Candidacy?         @relation(fields: [candidacyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  candidacyId  String?
  internship   Internship?        @relation(fields: [internshipId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  internshipId String?
  interviews   Interview[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  deletedAt    DateTime?
}

model Interview {
  id            String       @id @default(cuid())
  date          DateTime
  link          String
  platform      Platform
  postulation   Postulation? @relation(fields: [postulationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postulationId String?
  recruitment   Recruitment? @relation(fields: [recruitmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recruitmentId String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
}

model Location {
  id        String      @id @default(cuid())
  title     String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  company   Company[]
  institute Institute[]
  offer     Offer[]
  deletedAt DateTime?
}

// TODO -> renombrar a Category
model Field {
  id        String    @id @default(cuid())
  title     String    @unique
  projects  Project[]
  persons   Person[]
  offers    Offer[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Skill {
  id        String    @id @default(cuid())
  title     String    @unique
  persons   Person[]
  offers    Offer[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum TaskStatus {
  PENDING
  PROGRESS
  REVIEW
  DONE
}

enum Target {
  INTERNS
  CANDIDATS
}

enum Mode {
  REMOTE
  ONSITE
  HYBRID
}

enum Schedule {
  FULLTIME
  PARTTIME
}

enum RecruitmentStatus {
  PENDING
  REJECTED
  ACCEPTED
}

enum Platform {
  MEET
  ZOOM
}

enum UserType {
  PERSON
  COMPANY
  INSTITUTE
}
