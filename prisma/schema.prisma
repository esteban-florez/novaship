generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id          String       @id @default(cuid())
  name        String
  surname     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  phone       String?      @unique
  bio         String?
  address     String?
  image       String?
  profile     Profile?
  profileId   String?
  sended      Message[]    @relation(name: "sender")
  received    Message[]    @relation(name: "receiver")
  employments Employee[]
  institutes  Institute[]
  memberships Membership[]
  authUser    AuthUser?
}

model Membership {
  id             String          @id @default(cuid())
  isLeader       Boolean         @default(false)
  user           User            @relation(fields: [userId], references: [id])
  userId         String
  project        Project         @relation(fields: [projectId], references: [id])
  projectId      String
  interviews     Interview[]
  files          File[]
  participations Participation[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Project {
  id          String       @id @default(cuid())
  title       String       @unique
  description String
  image       String?      @unique
  visibility  Visibility
  company     Company?     @relation(fields: [companyId], references: [id])
  companyId   String?
  memberships Membership[]
  fields      Field[]
  tasks       Task[]
  release     Release?
  messages    Message[]
  files       File[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Participation {
  id           String     @id @default(cuid())
  isLeader     Boolean    @default(false)
  membership   Membership @relation(fields: [membershipId], references: [id])
  membershipId String
  task         Task       @relation(fields: [taskId], references: [id])
  taskId       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Task {
  id             String          @id @default(cuid())
  title          String
  description    String
  status         TaskStatus?
  subtasks       Subtask[]
  project        Project         @relation(fields: [projectId], references: [id])
  projectId      String
  participations Participation[]
  messages       Message[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Subtask {
  id          String     @id @default(cuid())
  title       String
  description String
  status      TaskStatus @default(PENDING)
  task        Task       @relation(fields: [taskId], references: [id])
  taskId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Release {
  id        String   @id @default(cuid())
  preview   String?  @unique
  price     Float
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id         String    @id @default(cuid())
  content    String    @db.Text
  seen       DateTime?
  sender     User      @relation(name: "sender", fields: [senderId], references: [id])
  senderId   String
  receiver   User?     @relation(name: "receiver", fields: [receiverId], references: [id])
  receiverId String?
  project    Project?  @relation(fields: [projectId], references: [id])
  projectId  String?
  task       Task?     @relation(fields: [taskId], references: [id])
  taskId     String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model File {
  id        String     @id @default(cuid())
  src       String
  project   Project    @relation(fields: [projectId], references: [id])
  projectId String
  author    Membership @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Profile {
  id          String       @id @default(cuid())
  // Quizás title pueda ser una tabla de titulaciones, por ahora un string normal.
  title       String
  curriculum  String?
  schedule    Json
  description String       @db.Text
  fields      Field[]
  skills      Skill[]
  experiences Experience[]
  candidacies Candidate[]
  internships Intern[]
  reviews     Review[]
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Experience {
  id          String   @id @default(cuid())
  name        String
  role        String
  description String?  @db.Text
  phone       String?
  from        DateTime
  to          DateTime
  profile     Profile  @relation(fields: [profileId], references: [id])
  profileId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Company {
  id            String     @id @default(cuid())
  name          String
  description   String     @db.Text
  email         String     @unique
  phone         String     @unique
  address       String
  image         String?
  verifiedAt    DateTime?
  certification String?
  projects      Project[]
  employees     Employee[]
  offers        Offer[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Review        Review[]
}

model Employee {
  id        String   @id @default(cuid())
  role      Role?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  content   String   @db.Text
  profile   Profile  @relation(fields: [profileId], references: [id])
  profileId String
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Candidate {
  id           String        @id @default(cuid())
  description  String?       @db.Text
  profile      Profile       @relation(fields: [profileId], references: [id])
  profileId    String
  postulations Postulation[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Intern {
  id           String        @id @default(cuid())
  description  String?       @db.Text
  profile      Profile       @relation(fields: [profileId], references: [id])
  profileId    String
  postulations Postulation[]
  institue     Institute     @relation(fields: [instituteId], references: [id])
  instituteId  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Offer {
  id           String        @id @default(cuid())
  title        String
  description  String        @db.Text
  mode         Mode
  hours        Int?
  schedule     Schedule
  salary       Float
  target       Target
  company      Company       @relation(fields: [companyId], references: [id])
  companyId    String
  fields       Field[]
  skills       Skill[]
  postulations Postulation[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Postulation {
  id          String             @id @default(cuid())
  status      PostulationStatus?
  offer       Offer              @relation(fields: [offerId], references: [id])
  offerId     String
  candidate   Candidate?         @relation(fields: [candidateId], references: [id])
  candidateId String?
  intern      Intern?            @relation(fields: [internId], references: [id])
  internId    String?
  interviews  Interview[]
  // quizas podría ligarse a un reclutador de la empresa
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model Interview {
  id            String      @id @default(cuid())
  date          DateTime
  link          String
  platform      Platform
  interviewer   Membership  @relation(fields: [membershipId], references: [id])
  membershipId  String
  postulation   Postulation @relation(fields: [postulationId], references: [id])
  postulationId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Institute {
  id            String    @id @default(cuid())
  name          String
  description   String    @db.Text
  address       String
  certification String
  email         String    @unique
  phone         String    @unique
  image         String?
  verifiedAt    DateTime?
  interns       Intern[]
  director      User      @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Field {
  id        String    @id @default(cuid())
  title     String    @unique
  projects  Project[]
  profiles  Profile[]
  offers    Offer[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Skill {
  id        String    @id @default(cuid())
  title     String
  profiles  Profile[]
  offers    Offer[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model AuthUser {
  id           String        @id @default(cuid())
  email        String        @unique
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @unique
  auth_session AuthSession[]
  auth_key     AuthKey[]
}

model AuthSession {
  id             String   @id @default(cuid())
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)
  authUserEmail  String?

  @@index([user_id])
}

model AuthKey {
  id              String   @id @default(cuid())
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)
  authUserEmail   String?

  @@index([user_id])
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum TaskStatus {
  PENDING
  PROCESS
  DONE
}

enum Role {
  OWNER
  RECRUITER
}

enum Target {
  INTERNS
  CANDIDATS
}

enum Mode {
  REMOTE
  ONSITE
  HYBRID
}

enum Schedule {
  FULLTIME
  PARTTIME
}

enum PostulationStatus {
  PENDING
  REJECTED
  ACCEPTED
}

enum Platform {
  MEET
  ZOOM
}
